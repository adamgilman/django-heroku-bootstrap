{"name":"Django-heroku-bootstrap","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","tagline":"Get your Django app running on Heroku in less than 5 minutes","body":"# Django Heroku Bootstrap (DHB)\r\n\r\nGet your Django app running on Heroku in less than 5 minutes. Really.\r\n\r\n## Quick start\r\n\r\n* Clone DHB\r\n```\r\ngit clone https://github.com/callmephilip/django-heroku-bootstrap.git\r\n```\r\n* Make sure you are logged in to Heroku\r\n```\r\nheroku login\r\n```\r\n* Create a new heroku project\r\n```\r\nheroku create <name_of_your_app>\r\n```\r\n* Sort your remotes out\r\n```\r\ngit remote -v\r\n```\r\nYou are most likely to see 2 distinct remotes at this point. Origin is pointing to DHB's Github and heroku pointing to the git repository for your Heroku application. Keep heroku and feel free to do whatever with the origin (remove or rename if you want to keep the upstream reference). Just saying.   \r\n* Being a smart developer you are using a virtual environment for your project. Create one. Activate it.\r\n* Run pip install -r requirements.txt. Grab a cup of tea/coffee. Come back to find all packages successfully installed.\r\n```\r\npip install -r requirements.txt\r\n```\r\n* Head to settings/aws.py and update your AWS credentials\r\n\r\n```python\r\n#Your Amazon Web Services access key, as a string.\r\nAWS_ACCESS_KEY_ID = \"\"\r\n\r\n#Your Amazon Web Services secret access key, as a string.\r\nAWS_SECRET_ACCESS_KEY = \"\"\r\n```\r\n\r\n* Put a database on your Heroku\r\n\r\n```\r\nheroku addons:add heroku-postgresql:dev\r\n```\r\n\r\n* Running your app locally\r\n\r\n```\r\nfab run\r\n```\r\n\r\n* Deploy your application\r\n\r\n```\r\nfab deploy\r\n``` \r\n\r\n## What's in the box\r\n\r\nCheck out requirements.txt for details on the dependencies. \r\n\r\nDHB comes with an opinionated but powerful arsenal of tools that will help you take over the\r\nworld with your web app in no time \r\n\r\n* Postgres for storing data\r\n* Amazon S3 for static content\r\n* Amazon SES for emails\r\n* Redis as a key-value store\r\n* Celery for background tasks\r\n* Celerybeat for periodic tasks\r\n* Fabric for housekeeping\r\n\r\nAll the settings are spread accross 6 files in the settings/ directory.\r\n* aws.py contains AWS credentials and settings \r\n* celerybeat.py has Celerybeat's schedule configuration \r\n* common.py has all your standard Django jazz that is identical for dev and production environments\r\n* dev.py contains development specific settings \r\n* prod.py contains production specific settings\r\n* static.py is used for collecstatic routine\r\n\r\n### Static files\r\n\r\nIn settings/aws.py set the name of your S3 bucket for the project\r\n\r\n```python\r\n#Your Amazon Web Services storage bucket name, as a string.\r\nAWS_STORAGE_BUCKET_NAME = \"\"\r\n```   \r\n\r\n### Email\r\n\r\nAssuming you've provided your AWS credentials in the settings file, email will just work. When running locally, emails will be dumped in the console. In production, DHB will send your love letters through Amazon SES (make sure you use a verified sender address when sending emails with SES) \r\n\r\n```python\r\nfrom django.core.mail import send_mail\r\n\r\nsend_mail('testing mail', 'Here is the message.', 'bob@mysite.com', ['bob@gmail.com'], fail_silently=False)\r\n``` \r\n\r\n### Database please\r\n\r\nOf course. You first need to get Postrgres on your Heroku \r\n\r\n```\r\nheroku addons:add heroku-postgresql:dev\r\n```\r\n\r\nAnd you should be set.\r\n\r\n### Redis\r\n\r\nVegetables are good for you. Especially when they help you build amazing apps. DHB uses Redis as a broker for Celery, which in turn is used for running background tasks. \r\n\r\nIf you don't have Redis running on your dev machine, get it [here](http://redis.io/download).\r\n\r\nHeroku offers an add-on called \"Redis to go\". Let's activate it    \r\n\r\n```\r\nheroku addons:add redistogo:nano\r\n```\r\n\r\nTo see if it works\r\n\r\n```python\r\nimport redis\r\nimport os\r\n\r\nredis_url = os.getenv('REDISTOGO_URL', 'redis://localhost:6379')\r\nredis_instance = redis.from_url(redis_url)\r\nredis_instance.set('answer', 42)\r\n```\r\n\r\nOnce again, when running locally, make sure you have Redis server running on your machine.\r\n\r\n\r\n### Celery\r\n\r\n[Celery](http://celeryproject.org) allows you to run bacground tasks. DHB uses Celery coupled with Redis. \r\n\r\n### Celerybeat\r\n\r\nCelerybeat allows you to have periodic tasks associated with your app. Tasks configuration is stored in settings/celerybeat.py (cunning, I know). \r\n\r\n## Running\r\n\r\n* Let's make sure all the code is up to date\r\n\r\n```\r\ngit commit -a -m \"initial commit\"\r\n```\r\n\r\n* Now you can deploy your app\r\n\r\n```\r\nfab deploy\r\n```\r\n\r\nDeployment script takes care of several things\r\n\r\n** Pushing code to Heroku\r\n** Moving static assets to S3\r\n** Synchronizing database  \r\n\r\n* Make sure both web instance and the celeryd worker are up\r\n\r\n```\r\nheroku ps \r\n```\r\nYou should see both celeryd and web running. If celeryd is not there, run the following\r\n\r\n```\r\nheroku ps:scale celeryd=1\r\n```\r\n\r\nSame applies to celerybeat (assuming you need it):\r\n\r\n```\r\nheroku ps:scale celerybeat=1\r\n```\r\n\r\n* Ta da! Your app is up running on Heroku\r\n\r\n```\r\nheroku open\r\n```\r\n\r\n* To run the local version:\r\n\r\n```\r\nfab run\r\n```\r\n\r\n## Example App\r\n\r\n/apps/examples contains a simple email form which you can use to test the setup. Navigate to /examples/email/ to try it. \r\n\r\n## Roadmap\r\n\r\n* Schema migrations with South\r\n* Tests\r\n* Caching\r\n* File uploads\r\n"}